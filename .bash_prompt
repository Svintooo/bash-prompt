#
# Bash prompt
#


# Custom Prompt
if false; then


  # Cleanup default prompt and enable custom prompt
  declare -F ___prompt_deactivate >/dev/null && ___prompt_deactivate
  eval "$(oh-my-posh init bash --config $HOME/.cache/oh-my-posh/themes/peru.omp.json)"


# Default Prompt
else


  # NOTES
  #
  # - This file must be able to be sourced multiple times without anything
  #   breaking.
  #     Test: source ~/.bash_prompt ; source ~/.bash_prompt
  #
  # - Any code $(...) run inside PS1 needs to preserve exit code $?.
  #   Example: $(r=$? ; ... ; exit $r)
  #     Test: ( exit 1 )
  #           echo "This should be 1: $?"
  #
  # - Any code run inside PROMPT_COMMAND needs to preserve BASH_REMATCH.
  #   Regex comparison like [[ asdf =~ sd ]] will modify BASH_REMATCH for
  #   the user. Make sure it is restored using something like
  #   `local m="$BASH_REMATCH"` and `BASH_REMATCH="$m"`.
  #     Test: [[ asdf =~ sd ]]
  #           echo "$BASH_REMATCH"
  #
  # - Prevent executing malicious code. Never do integer operations on
  #   user controlled variables.
  #     Dangerous: (( var += 1 )), $(( var - 1 )), [[ "$var" -eq 1 ]] 
  #     Safe:      [[ "$var" == 1 ]], [[ "$var" > 0 ]], [[ -z "$var" ]]
  #     Example: var='PATH=0'
  #              (( var + 1 ))
  #              echo "$PATH"
  #     Example: var='arr[$(echo "U r h4cked" > HACKED.TXT)]'
  #              (( var + 1 ))
  #              cat HACKED.TXT


  # Table of Content
  #  1. Init
  #  2. Prompt (your code goes here)
  #  3. Post


  #
  # 1. Init - Set up everything you need to define your prompt
  #


  # Store all current shell variable/function names
  [[ -n "${PROMPT_COMMAND+x}" ]] || PROMPT_COMMAND=""
  [[ -n "${BASH_REMATCH+x}"   ]] || BASH_REMATCH=""
  declare shell_vars=""  #NOTE: shell_vars lines are separated so variable is included when running compgen
  shell_vars="$( compgen -v ; compgen -A function )"


  # Define arrays
  declare -a PreCommands=()
  declare -a PostCommands=()
  declare -a RuntimeDeclares=()
  declare -a ScriptDeclares=( PostCommands PreCommands )


  # Define control codes
  # https://gist.github.com/ConnerWill/d4b6c776b509add763e17f9f113fd25b
  declare Esc='\033'                                       # Same as '\e'
  declare CursorSave="${Esc}[s"  CursorRestore="${Esc}[u"  # Cursor Position
  declare HideStart='\['         HideEnd='\]'              # Hide non-printing chars, prevent cursor b0rk
  declare CmdStop="${Esc}"'\\'
  declare CmdTitle="${Esc}]0;"                             # Set Window/Tab titlebar text
  declare OSCPromptStart="${Esc}]133;A${CmdStop}"      #TODO /etc/profile.d/vte-2.91.sh
  declare OSCPromptEnd="${Esc}]133;B${CmdStop}"        #TODO /etc/profile.d/vte-2.91.sh
  declare OSCReportRetval="${Esc}]133;D\$?${CmdStop}"  #TODO /etc/profile.d/vte-2.91.sh
  ScriptDeclares+=( Esc CursorSave CursorRestore HideStart HideEnd CmdStop CmdTitle OSCPromptStart OSCPromptEnd OSCReportRetval )


  # Define color control codes
  # NOTE: These are deliberately left undeclared if the terminal does not support colors
  if [[ "$TERM" =~ ^xterm-color$|.*-256color$ ]]; then
    declare  Reset="${Esc}[0;00m"
    declare  Black="${Esc}[0;30m"    DarkGrey="${Esc}[1;30m"
    declare    Red="${Esc}[0;31m"    LightRed="${Esc}[1;31m"
    declare  Green="${Esc}[0;32m"  LightGreen="${Esc}[1;32m"
    declare  Brown="${Esc}[0;33m"      Yellow="${Esc}[1;33m"
    declare   Blue="${Esc}[0;34m"   LightBlue="${Esc}[1;34m"
    declare Purple="${Esc}[0;35m" LightPurple="${Esc}[1;35m"
    declare   Cyan="${Esc}[0;36m"   LightCyan="${Esc}[1;36m"
    declare   Grey="${Esc}[0;37m"       White="${Esc}[1;37m"

    colors=(
      Reset
      Black    Red      Green      Brown  Blue      Purple      Cyan      Grey
      DarkGrey LightRed LightGreen Yellow LightBlue LightPurple LightCyan White
    )
    for color in "${colors[@]}"; do
      declare "H${color}"="${HideStart}${!color}${HideEnd}"  # declare hidden version of each color
      ScriptDeclares+=( "${color}" "H${color}" )
    done
    unset color colors
  fi


  # Define helper functions

  # Takes a string and prints it at the far right in the terminal area
  if infocmp | awk -v RS='\0' '!/\ssc=/ || !/\src=/ {exit 1}'; then
    function ___prompt_right_aligned() {
      local str="$1"
      local escseq='('$'\x01''?'$'\e''([@A-Z\[\\^_]|\])[0-9:;<=>?]*[-!"#$%&()*,./'"'"']*([@A-Z\[\\^_`a-z{|}~]|\]))'$'\x02''?'
      local str_no_escseq="$( sed -E "s/$escseq//g" <<<"${str@P}" )"
      local width="${#str_no_escseq}"
      local cols="$( [[ "$COLUMNS" ]] && echo "$COLUMNS" || tput cols )"
      local cursor_save="\\e[s"  move_right="\\e[${cols}C"
      local cursor_load="\\e[u"  move_left="\\e[$((width-1))D"
      printf "${cursor_save}${move_right}${move_left}%s${cursor_load}" "$1"
    }
  else
    # Disable support for right aligned prompts if cursor_save (sc=) and cursor_load (rc=) are not supported
    function ___prompt_right_aligned() { :; }
  fi

  RuntimeDeclares+=( ___prompt_right_aligned )

  # Return cursor position
  # NOTE: function code is encapsulated using () instead of {}.
  #       This is done to run the code in a subshell.
  #       This is a precausion since I do not know if `exec < /dev/tty` would break your bash instance in any way.
  function ___prompt__cursor_position() (
    local oldstty
    local -a pos
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\033[6n" > /dev/tty
    IFS=';' read -r -d R -a pos
    stty $oldstty
    #echo "$((${pos[0]:2} - 2))"  # Row
    echo "$((${pos[1]} - 1))"    # Column
  )

  RuntimeDeclares+=( ___prompt__cursor_position )


  #
  # 2. Prompt - Code your prompt here
  #


  # Declare your prompt modules
  declare TimeStamp="${HLightCyan}"'$(r=$? ; date +"%Y-%m-%d %H:%M:%S %:z" ; exit $r)'"${HReset}"
  declare RetCode="${HRed}"'$(r=$? ; [[ "$r" == "0" ]] || echo "$r" ; exit $r)'"${HReset}"
  declare NoNewline='$(r=$?; col="$(___prompt__cursor_position)" ; [[ "$col" == 0 ]] || echo '"'\n${HYellow}(no trailing newline)${HReset}\n\n'"' ;exit $r)'
  declare BeatTime="${HYellow}"'[$(r=$? ; date +"%Y-%m-%d" ; exit $r)$(r=$? ; date -u +"%s" | awk "{printf \"@%.2f\", (((\\$1+3600)%86400)/86.4)}" ; exit $r)]'"${HReset}"
  declare ShellLevel="$( [[ "$SHLVL" != "1" ]] && echo "[$SHLVL]" )"
  declare GitBranch='$(r=$? ; { git symbolic-ref --short HEAD || git describe --always; } 2>/dev/null | sed "s/.*/[&]/" ; exit $r)'
  declare CmdDuration='$(r=$? ; [[ "$___prompt_cmdtime_elapsed" =~ ^0?$ ]] || echo "'"${HYellow}"'${___prompt_cmdtime_elapsed}'"${HReset}"'" ; exit $r)'
  declare UserColor="$( [[ "$USER" == root ]] && echo "$HRed" || echo "$HGreen" )"
  declare PromptSign="${UserColor}"'\$'"${HReset}"
  declare UserHost="${HLightCyan}"'\u@\h'"${HReset}"
  declare PwdFolder="${HBlue}"'$(r=$? ; pwd="${PWD/#$HOME/\~}" ; pwd="${pwd##*/}"; echo "${pwd}/" ; exit $r)'"${HReset}"
  declare Pwd="${HCyan}"'\w'"${HReset}"
  ScriptDeclares+=( TimeStamp RetCode NoNewline BeatTime ShellLevel GitBranch CmdDuration UserColor PromptSign UserHost PwdFolder Pwd )


  # Create your prompt using your modules

  # My singleline prompt
  #PS1="${BeatTime}${UserHost}:${PwdFolder}${ShellLevel}"'\$ '

  # My multiline prompt
  PS1=""
  PS1+="${NoNewline}"
  PS1+='$(r=$? ; (exit $r) ; ___prompt_right_aligned "'"${RetCode} ${CmdDuration} ${TimeStamp}"'" ; exit $r)'
  PS1+="${UserHost}:${Pwd}"'\n'
  PS1+="${GitBranch}${PromptSign}${ShellLevel} "


  # Dynamically update the text in your terminal titlebar
  if [[ "$TERM" =~ ^(xterm|rxvt) ]]; then
    # Add escape codes to the prompt that sets the title
    PS1="${PS1}${HideStart}${CmdTitle}\u@\h:\w${CmdStop}${HideEnd}"

    # Set title to the user command being executed
    if true; then
      eval '
      function ___prompt_precmd__set_title_to_BASH_COMMAND() {
        # Note that any eventual escape codes in $BASH_COMMAND are replaced by "^?"
        printf '"'${CmdTitle}"'%s'"${CmdStop}'"' "${BASH_COMMAND//[[:cntrl:]]/^?}"
      }'

      PreCommands+=( ___prompt_precmd__set_title_to_BASH_COMMAND )
      RuntimeDeclares+=( ___prompt_precmd__set_title_to_BASH_COMMAND )
    fi
  fi


  # Only show last line of the prompt if no user commands were run
  # NOTE: This takes advantage of the fact that PreCommands are not executed if
  #       enter is pressed on an empty prompt, but PostCommands are always executed.
  # NOTE: Unfortunately this breaks if user runs a subshell.
  #       Example: User only runs `(echo "hello")` on the command line.
  if true; then
    function ___prompt_precmd__mini_prompt_on_empty_cmd() {
      ___prompt_layout="full"  # This only happens if a user command was executed
    }

    function ___prompt_postcmd__mini_prompt_on_empty_cmd() {
      case "$___prompt_layout" in
        (minimal)
          PS1="${___prompt_PS1##*\\n}" ;;  # Print only last line of PS1
        (full|*)
          PS1="$___prompt_PS1"         ;;  # Print full PS1
      esac

      ___prompt_layout="minimal"  # This always happen
    }

    ___prompt_PS1="$PS1"
    PreCommands+=( ___prompt_precmd__mini_prompt_on_empty_cmd )
    PostCommands+=( ___prompt_postcmd__mini_prompt_on_empty_cmd )
    RuntimeDeclares+=( ___prompt_precmd__mini_prompt_on_empty_cmd ___prompt_postcmd__mini_prompt_on_empty_cmd ___prompt_layout ___prompt_PS1 )
  fi


  # Calculate Execution time (generate string for variable ___prompt_cmdtime_elapsed)
  # NOTE: Variable ___prompt_cmdtime_start is reset and checked to support when user runs multiple
  #       commands at once (ex: echo 1 | sed 's/1/2/' ; echo "hello" ).
  if true; then
    function ___prompt_precmd__execution_time() {
      if [[ -z "$___prompt_cmdtime_start" ]]; then
        ___prompt_cmdtime_start="$EPOCHSECONDS"
      fi
    }

    function ___prompt_postcmd__execution_time() {
      local m="$BASH_REMATCH"
      if [[ "$___prompt_cmdtime_start" =~ ^[0-9]+$ && "$EPOCHSECONDS" =~ ^[0-9]+$ ]]; then
        local elapsed
        local sec_since_year_zero="62167219200"  # Seconds between year 0 and epoch
        elapsed="$(( EPOCHSECONDS - ___prompt_cmdtime_start - sec_since_year_zero ))"
        elapsed="$( date -ud "@${elapsed}" +'%y %j %H %M %S' )"
        elapsed="$( awk '{print " "$1-0"y "$2-1"d "$3-0"h "$4-0"m "$5-0"s"}' <<<"$elapsed" )"
        elapsed="${elapsed// 0?/}"
        elapsed="${elapsed# ${elapsed%% *}}"
        ___prompt_cmdtime_elapsed="$elapsed"
        ___prompt_cmdtime_start=""
      fi
      BASH_REMATCH="$m"  # Prevent BASH_REMATCH to be modified by =~
    }

    PreCommands+=( ___prompt_precmd__execution_time )
    PostCommands+=( ___prompt_postcmd__execution_time )
    RuntimeDeclares+=( ___prompt_precmd__execution_time ___prompt_postcmd__execution_time ___prompt_cmdtime_start ___prompt_cmdtime_elapsed )
  fi


  #
  # 3. Post - Activate your prompt, clean up variables that are no longer used
  #


  # Declare custom PROMPT_COMMAND handling code
  # NOTE: This is needed to hinder PreCommands to be run for each PostCommand.

  if ! declare -p ___prompt_PROMPT_COMMAND 2>/dev/null | grep -q '^declare -a'; then
    declare -a ___prompt_PROMPT_COMMAND=( "${PROMPT_COMMAND[@]}" )
    unset PROMPT_COMMAND
    declare PROMPT_COMMAND="___prompt_commands"
  fi

  function ___prompt_commands() {
    local cmd prompt_command

    # Enforce PROMPT_COMMAND to only contain this function ($FUNCNAME)
    # Also add any new commands in PROMPT_COMMAND to ___prompt_PROMPT_COMMAND
    if [[ "${PROMPT_COMMAND[*]}" != "$FUNCNAME" ]]; then
      for cmd in "${PROMPT_COMMAND[@]}"; do
        prompt_command="$( sed -E "s/;\s*$FUNCNAME\s*;/;/g ; s/^\s*;+\s*|\s*;+\s*$//g" <<<";$cmd;" )"
        if [[ -n "$prompt_command" ]] && ! printf '%s\0' "${___prompt_PROMPT_COMMAND[@]}" | grep -qzxF "$prompt_command"; then
          ___prompt_PROMPT_COMMAND+=( "$prompt_command" )
        fi
      done

      unset PROMPT_COMMAND
      declare -g PROMPT_COMMAND="$FUNCNAME"
    fi

    # Run prompt commands
    for cmd in "${___prompt_PROMPT_COMMAND[@]}"; do
      eval "$cmd"
    done
  }

  RuntimeDeclares+=( ___prompt_commands ___prompt_PROMPT_COMMAND )


  # PostCommands
  # These are run before the prompt is printed to the terminal.
  # NOTE: These also run if user did not run any command (pressed enter on an empty prompt).
  for cmd in "${PostCommands[@]}"; do
    if ! printf '%s\0' "${___prompt_PROMPT_COMMAND[@]}" | grep -qzxF "$cmd"; then
      ___prompt_PROMPT_COMMAND+=( "$cmd" )
    fi
  done
  unset cmd


  # PreCommands
  # These are run once for each user command.
  # NOTE: Trap is not triggered if user presses enter on an empty prompt.
  # NOTE: Trap is triggered multiple times if user runs multiple commands on a single line.
  #       Example (pipes):     echo 1 | sed 's/1/2/' | cat
  #       Example (semicolon): echo 1; echo 2; echo 3
  # NOTE: Trap is also triggered for every command in PostCommands.
  #       This is mitigated by the if clause.
  #       Because of this it is important that ___prompt_commands is the only command in PROMPT_COMMAND.
  trap "$(
    echo   # Extra `echo` added because it makes the trap look better when running `trap -p DEBUG`
    echo   'if [[ "$BASH_COMMAND" != "___prompt_commands" ]]; then'
    printf '  %s\n' "${PreCommands[@]}"
    echo   'fi'
  )" DEBUG


  # Define prompt deactivation function
  # Run this manually to remove everything that was done in this script file and return to a sane default.
  # NOTE: This only works if every function and variable has been properly added to the RuntimeDeclares array.
  eval '
  function ___prompt_deactivate() {
    # Set Prompt
    PS1='\''\u@\h:\w\$ '\''

    # Set Title
    if [[ "$TERM" =~ ^(xterm|rxvt) ]]; then
      printf '"'${CmdTitle}%s${CmdStop}'"' "${USER}@${HOSTNAME}"
    fi

    # Remove Prompt Commands
    local cmd cmds=()
    for cmd in "${___prompt_PROMPT_COMMAND[@]}"; do
      if ! printf '"'%s\0'"' '"${RuntimeDeclares[@]@Q}"' | grep -qzxF "$cmd"; then
        cmds+=( "$cmd" )
      fi
    done
    unset PROMPT_COMMAND
    PROMPT_COMMAND="${cmds[*]/%/;}"

    # Unset variables and functions
    '"$( printf 'unset %s\n    ' "${RuntimeDeclares[@]}" )"'
    unset -f "$FUNCNAME"
  }'

  # Chaining the function to an alias with the same name, since deleting the DEBUG trap
  # must be done outside the function.
  alias ___prompt_deactivate='trap - DEBUG ; unalias ___prompt_deactivate ; ___prompt_deactivate'

  RuntimeDeclares+=( ___prompt_deactivate )


  # Cleanup
  unset "${ScriptDeclares[@]}"
  unset ScriptDeclares
  shell_vars="$( diff <(echo "$shell_vars") <(compgen -v ; compgen -A function) | sed -E '/^[^<>]|RuntimeDeclares/d' | grep -vF ${RuntimeDeclares[@]/#/-e } )"
  unset RuntimeDeclares


  # Print error if we forgot to unset any variables or functions
  if [[ -n "$shell_vars" ]]; then
    echo >&2 "$shell_vars"
    echo >&2 "${BASH_SOURCE[0]}: ERROR: Above temporary variables/functions was never unset"
  fi
  unset shell_vars


fi
